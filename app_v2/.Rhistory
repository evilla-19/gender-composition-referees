geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("referee group composition", "final decision"), expand = c(.05, .05)) +
scale_fill_manual(values = col_2015) +
theme_minimal() +
theme(legend.position = 'right', panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text.x=element_blank())
})
output$plotPanel1 <- renderUI({
tagList(
fluidRow(
column(
3,
renderPlot(plot1())
)))
})
output$plotPanel2 <- renderUI({
tagList(
fluidRow(
column(
12,
renderPlot(plot2())
)))
})
observe( {
req(input$width)
if(input$width < 1024) {
shinyjs::show("plotPanel1")
shinyjs::hide("plotPanel2")
} else {
shinyjs::hide("plotPanel1")
shinyjs::show("plotPanel2")
}
})
}
runApp(shinyApp(ui, server))
runApp()
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
')),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
plotOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
output$dimension_display <- renderText({
paste(input$dimension[1], input$dimension[2], input$dimension[2]/input$dimension[1])
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
data_2015 = read.delim(file = 'EMBOJ_Track_Record_2015_annotated.txt', header = TRUE, sep = '\t')
data_2016 = read.delim(file = 'Track_record_2016_annotated.txt', header = TRUE, sep = '\t')
data_2017 = read.delim(file = 'EMBOJ_Track_record_2017_annotated.txt', header = TRUE, sep = '\t')
data_2015$gender = factor(data_2015$gender, levels = c('male', 'female', 'None'))
data_2016$gender = factor(data_2016$gender, levels = c('male', 'female', 'None'))
data_2017$gender = factor(data_2017$gender, levels = c('male', 'female', 'None'))
df4_2015 = data_2015 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
df4_2016 = data_2016 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
df4_2017 = data_2017 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
### color block, reusable for all other alluvium plots ###
decision_types = data.frame(decision_type = unique(c(
as.character(df4_2015$Final.Decision.Type),
as.character(df4_2016$Final.Decision.Type),
as.character(df4_2017$Final.Decision.Type)
)))
decision_types$color = c('#bcb8b8', '#6b2626', '#9e3434', '#225620', '#36ad32', '#1a2977', '#452c59',
'#663a0b', '#302f2e', '#3d5e51')
############################################################
col_2015 = decision_types$color[match(levels(df4_2015$Final.Decision.Type), decision_types$decision_type)]
fill_levels_2015 = c(unique(as.character(df4_2015$Final.Decision.Type)),
unique(df4_2015$team_composition)
)
fill_2015 = c('#dba7e5', 'darkblue', 'darkgray', rep('darkgray', length(fill_levels_2015)-3))
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
')),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
plotOutput("alluvium_2015")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
output$dimension_display <- renderText({
paste(input$dimension[1], input$dimension[2], input$dimension[2]/input$dimension[1])
})
output$alluvium_2015 <- renderPlot({
ggplot(df4_2015, aes(y = freq, axis1 = team_composition, axis2 = Final.Decision.Type)) +
geom_alluvium(aes(fill = Final.Decision.Type), width = 1/12) +
geom_stratum(width = 1/12, fill = fill_2015 , color = 'black') +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("referee group composition", "final decision"), expand = c(.05, .05)) +
scale_fill_manual(values = col_2015) +
theme_minimal() +
theme(legend.position = 'right', panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text.x=element_blank())
})
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
data_2015 = read.delim(file = 'EMBOJ_Track_Record_2015_annotated.txt', header = TRUE, sep = '\t')
data_2016 = read.delim(file = 'Track_record_2016_annotated.txt', header = TRUE, sep = '\t')
data_2017 = read.delim(file = 'EMBOJ_Track_record_2017_annotated.txt', header = TRUE, sep = '\t')
data_2015$gender = factor(data_2015$gender, levels = c('male', 'female', 'None'))
data_2016$gender = factor(data_2016$gender, levels = c('male', 'female', 'None'))
data_2017$gender = factor(data_2017$gender, levels = c('male', 'female', 'None'))
df4_2015 = data_2015 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
df4_2016 = data_2016 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
df4_2017 = data_2017 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
### color block, reusable for all other alluvium plots ###
decision_types = data.frame(decision_type = unique(c(
as.character(df4_2015$Final.Decision.Type),
as.character(df4_2016$Final.Decision.Type),
as.character(df4_2017$Final.Decision.Type)
)))
decision_types$color = c('#bcb8b8', '#6b2626', '#9e3434', '#225620', '#36ad32', '#1a2977', '#452c59',
'#663a0b', '#302f2e', '#3d5e51')
############################################################
col_2015 = decision_types$color[match(levels(df4_2015$Final.Decision.Type), decision_types$decision_type)]
fill_levels_2015 = c(unique(as.character(df4_2015$Final.Decision.Type)),
unique(df4_2015$team_composition)
)
fill_2015 = c('#dba7e5', 'darkblue', 'darkgray', rep('darkgray', length(fill_levels_2015)-3))
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
')),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
column(width = 3,
wellPanel(
plotOutput("alluvium_2015")
))
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
output$dimension_display <- renderText({
paste(input$dimension[1], input$dimension[2], input$dimension[2]/input$dimension[1])
})
output$alluvium_2015 <- renderPlot({
ggplot(df4_2015, aes(y = freq, axis1 = team_composition, axis2 = Final.Decision.Type)) +
geom_alluvium(aes(fill = Final.Decision.Type), width = 1/12) +
geom_stratum(width = 1/12, fill = fill_2015 , color = 'black') +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("referee group composition", "final decision"), expand = c(.05, .05)) +
scale_fill_manual(values = col_2015) +
theme_minimal() +
theme(legend.position = 'right', panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text.x=element_blank())
})
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
data_2015 = read.delim(file = 'EMBOJ_Track_Record_2015_annotated.txt', header = TRUE, sep = '\t')
data_2016 = read.delim(file = 'Track_record_2016_annotated.txt', header = TRUE, sep = '\t')
data_2017 = read.delim(file = 'EMBOJ_Track_record_2017_annotated.txt', header = TRUE, sep = '\t')
data_2015$gender = factor(data_2015$gender, levels = c('male', 'female', 'None'))
data_2016$gender = factor(data_2016$gender, levels = c('male', 'female', 'None'))
data_2017$gender = factor(data_2017$gender, levels = c('male', 'female', 'None'))
df4_2015 = data_2015 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
df4_2016 = data_2016 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
df4_2017 = data_2017 %>% group_by(Manuscript) %>%
mutate(male_count = sum(gender == 'male'), female_count = sum(gender == 'female'), none_count = sum(gender == 'None'), total= n(), perc_male = (male_count / total) * 100, perc_female = (female_count/ total) * 100) %>%
mutate(team_composition = ifelse(perc_male == 100, 'male_only', ifelse(perc_female == 100, 'female_only', 'mixed'))) %>% group_by(team_composition, Final.Decision.Type) %>%
select(team_composition, Final.Decision.Type) %>%
mutate(freq = n()) %>% unique()
### color block, reusable for all other alluvium plots ###
decision_types = data.frame(decision_type = unique(c(
as.character(df4_2015$Final.Decision.Type),
as.character(df4_2016$Final.Decision.Type),
as.character(df4_2017$Final.Decision.Type)
)))
decision_types$color = c('#bcb8b8', '#6b2626', '#9e3434', '#225620', '#36ad32', '#1a2977', '#452c59',
'#663a0b', '#302f2e', '#3d5e51')
############################################################
col_2015 = decision_types$color[match(levels(df4_2015$Final.Decision.Type), decision_types$decision_type)]
fill_levels_2015 = c(unique(as.character(df4_2015$Final.Decision.Type)),
unique(df4_2015$team_composition)
)
fill_2015 = c('#dba7e5', 'darkblue', 'darkgray', rep('darkgray', length(fill_levels_2015)-3))
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
')),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
column(width = 3,
wellPanel(
plotOutput("alluvium_2015")
))
)
)
))
)
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
')))
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
column(
width = 3,
wellPanel(
plotOutput("alluvium_2015")
)
)
)
)
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
'))),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
column(
width = 3,
wellPanel(
plotOutput("alluvium_2015")
)
)
)
)
)
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
output$dimension_display <- renderText({
paste(input$dimension[1], input$dimension[2], input$dimension[2]/input$dimension[1])
})
output$alluvium_2015 <- renderPlot({
ggplot(df4_2015, aes(y = freq, axis1 = team_composition, axis2 = Final.Decision.Type)) +
geom_alluvium(aes(fill = Final.Decision.Type), width = 1/12) +
geom_stratum(width = 1/12, fill = fill_2015 , color = 'black') +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("referee group composition", "final decision"), expand = c(.05, .05)) +
scale_fill_manual(values = col_2015) +
theme_minimal() +
theme(legend.position = 'right', panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text.x=element_blank())
})
})
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
')))
)
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
'))),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
column(
width = 3,
wellPanel(
plotOutput("alluvium_2015")
)
)
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
'))),
# Show a plot of the generated distribution
mainPanel(
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
'
))),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
plotOutput("alluvium_2015")
)
)
))
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$head(tags$script('
var dimension = [0, 0];
$(document).on("shiny:connected", function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
$(window).resize(function(e) {
dimension[0] = window.innerWidth;
dimension[1] = window.innerHeight;
Shiny.onInputChange("dimension", dimension);
});
'
))),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("dimension_display"),
plotOutput("alluvium_2015")
)
)
))
ad
ads
as
d
